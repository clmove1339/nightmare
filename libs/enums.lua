netvars = {
    m_flNextPrimaryAttack  = engine.get_netvar_offset('DT_BaseCombatWeapon', 'm_flNextPrimaryAttack'),
    m_flNextAttack         = engine.get_netvar_offset('DT_BaseCombatCharacter', 'm_flNextAttack'),
    m_lifeState            = engine.get_netvar_offset('DT_BasePlayer', 'm_lifeState'),
    m_hActiveWeapon        = engine.get_netvar_offset('DT_BaseCombatCharacter', 'm_hActiveWeapon'),
    m_hMyWeapons           = engine.get_netvar_offset('DT_BaseCombatCharacter', 'm_hMyWeapons'),
    m_iItemIDHigh          = engine.get_netvar_offset('DT_EconEntity', 'm_iItemIDHigh'),
    m_nFallbackPaintKit    = engine.get_netvar_offset('DT_EconEntity', 'm_nFallbackPaintKit'),
    m_flFallbackWear       = engine.get_netvar_offset('DT_EconEntity', 'm_flFallbackWear'),
    m_nFallbackSeed        = engine.get_netvar_offset('DT_EconEntity', 'm_nFallbackSeed'),
    m_iItemDefinitionIndex = engine.get_netvar_offset('DT_EconEntity', 'm_iItemDefinitionIndex'),
    m_iEntityQuality       = engine.get_netvar_offset('DT_EconEntity', 'm_iEntityQuality'),
    m_hViewModel           = 13064,
    m_nModelIndex          = engine.get_netvar_offset('DT_BaseViewModel', 'm_nModelIndex'),
    m_fFlags               = engine.get_netvar_offset('DT_BasePlayer', 'm_fFlags'),
    m_flDuckAmount         = engine.get_netvar_offset('DT_BasePlayer', 'm_flDuckAmount'),
    m_vecVelocity          = engine.get_netvar_offset('DT_BasePlayer', 'm_vecVelocity[0]'),
    m_hGroundEntity        = engine.get_netvar_offset('DT_BasePlayer', 'm_hGroundEntity'),
    m_nTickBase            = engine.get_netvar_offset('DT_BasePlayer', 'm_nTickBase'),
    m_iTeamNum             = engine.get_netvar_offset('DT_BaseEntity', 'm_iTeamNum'),
    m_nHitboxSet           = engine.get_netvar_offset('DT_BaseAnimating', 'm_nHitboxSet'),
    m_flThrowStrength      = engine.get_netvar_offset('DT_BaseCSGrenade', 'm_flThrowStrength'),
    m_bGunGameImmunity     = engine.get_netvar_offset('DT_CSPlayer', 'm_bGunGameImmunity'),
    m_bIsDefusing          = engine.get_netvar_offset('DT_CSPlayer', 'm_bIsDefusing'),
    m_bIsGrabbingHostage   = engine.get_netvar_offset('DT_CSPlayer', 'm_bIsGrabbingHostage'),
    m_vecViewOffset        = 0x108
};

for _, v in pairs(netvars) do
    if v == 0 then
        error('NETVAR GOVNO DAVAI PO NOVOI: ' .. _);
    end;
end;

---@enum FrameStages
FrameStages = {
    FRAME_UNDEFINED = -1,
    FRAME_START = 0,
    FRAME_NET_UPDATE_START = 1,
    FRAME_NET_UPDATE_POSTDATAUPDATE_START = 2,
    FRAME_NET_UPDATE_POSTDATAUPDATE_END = 3,
    FRAME_NET_UPDATE_END = 4,
    FRAME_RENDER_START = 5,
    FRAME_RENDER_END = 6
};

nixware = {
    ['Ragebot'] = {
        ['Target'] = {
            ['Scout'] = {
                hit_chance = menu.find_slider_int('Hit chance', 'Ragebot/Target/Scout'),
                auto_stop = menu.find_check_box('Auto stop', 'Ragebot/Target/Scout'),
                min_damage = menu.find_slider_int('Min damage', 'Ragebot/Target/Scout'),
            }
        }
    },
    ['Movement'] = {
        ['Anti aim'] = {
            enabled = menu.find_check_box('Enabled', 'Movement/Anti aim'),
            pitch = menu.find_combo_box('Pitch', 'Movement/Anti aim'),
            base_yaw = menu.find_combo_box('Base yaw', 'Movement/Anti aim'),
            yaw_offset = menu.find_slider_int('Yaw offset', 'Movement/Anti aim'),
            yaw_modifier = menu.find_combo_box('Yaw modifier', 'Movement/Anti aim'),
            yaw_modifier_offset = menu.find_slider_int('Yaw modifier offset', 'Movement/Anti aim'),
            yaw_desync = menu.find_combo_box('Yaw desync', 'Movement/Anti aim'),
            desync_inverter = menu.find_key_bind('Desync inverter', 'Movement/Anti aim'),
            yaw_desync_length = menu.find_slider_int('Yaw desync length', 'Movement/Anti aim'),
            extended_desync = menu.find_check_box('Extended desync [  ]', 'Movement/Anti aim'),
            roll_pitch = menu.find_slider_int('Pitch', 'Movement/Anti aim' .. '/Extended desync'),
            roll_yaw = menu.find_slider_int('Roll', 'Movement/Anti aim' .. '/Extended desync')
        },
        ['Movement'] = {
            fast_duck = menu.find_check_box('Fast duck', 'Movement/Movement'),
            fake_duck = menu.find_check_box('Fake duck', 'Movement/Movement'),
            fake_duck_bind = menu.find_key_bind('Fake duck', 'Movement/Movement'),
            edge_jump = menu.find_check_box('Edge jump', 'Movement/Movement'),
            edge_jump_bind = menu.find_key_bind('Edge jump', 'Movement/Movement'),
            accurate_walk = menu.find_check_box('Accurate walk', 'Movement/Movement'),
            accurate_walk_bind = menu.find_key_bind('Accurate walk', 'Movement/Movement'),
            auto_peek = menu.find_check_box('Auto peek [  ]', 'Movement/Movement'),
            auto_peek_bind = menu.find_key_bind('Auto peek', 'Movement/Movement'),
            retreat_options = menu.find_multi_combo_box('Retreat on', 'Movement/Movement/Auto peek'),
            auto_peek_color = menu.find_color_picker('Color', 'Movement/Movement/Auto peek'),
            moving_color = menu.find_color_picker('Moving color', 'Movement/Movement/Auto peek'),
            bunnyhop = menu.find_check_box('Bunnyhop', 'Movement/Movement'),
            auto_strafer = menu.find_check_box('Auto strafer [  ]', 'Movement/Movement'),
            smooth_amount = menu.find_slider_int('Smooth amount', 'Movement/Movement/Auto strafer'),
            leg_movement = menu.find_combo_box('Leg movement', 'Movement/Movement'),
        },
        ['Fakelag'] = {
            limit = menu.find_slider_int('Limit', 'Movement/Fakelag'),
        }
    }
};

IN = {
    ATTACK  = bit.lshift(1, 0),
    JUMP    = bit.lshift(1, 1),
    DUCK    = bit.lshift(1, 2),
    FORWARD = bit.lshift(1, 3),
    BACK    = bit.lshift(1, 4),
    USE     = bit.lshift(1, 5),
    CANCEL  = bit.lshift(1, 6),
    LEFT    = bit.lshift(1, 7),
    RIGHT   = bit.lshift(1, 8),
    MOVE    = bit.lshift(1, 9),
    SPEED   = bit.lshift(1, 17),
    AIR     = bit.lshift(1, 18),
    RELOAD  = bit.lshift(1, 19),
    ZOOM    = bit.lshift(1, 20),
    WALK    = bit.lshift(1, 21),
};

FL = {
    ONGROUND              = bit.lshift(1, 0),
    DUCKING               = bit.lshift(1, 1),
    ANIMDUCKING           = bit.lshift(1, 2),
    WATERJUMP             = bit.lshift(1, 3),
    ONTRAIN               = bit.lshift(1, 4),
    INRAIN                = bit.lshift(1, 5),
    FROZEN                = bit.lshift(1, 6),
    ATCONTROLS            = bit.lshift(1, 7),
    CLIENT                = bit.lshift(1, 8),
    FAKECLIENT            = bit.lshift(1, 9),
    INWATER               = bit.lshift(1, 10),
    FLY                   = bit.lshift(1, 11),
    SWIM                  = bit.lshift(1, 12),
    CONVEYOR              = bit.lshift(1, 13),
    NPC                   = bit.lshift(1, 14),
    GODMODE               = bit.lshift(1, 15),
    NOTARGET              = bit.lshift(1, 16),
    AIMTARGET             = bit.lshift(1, 17),
    PARTIALGROUND         = bit.lshift(1, 18),
    STATICPROP            = bit.lshift(1, 19),
    GRAPHED               = bit.lshift(1, 20),
    GRENADE               = bit.lshift(1, 21),
    STEPMOVEMENT          = bit.lshift(1, 22),
    DONTTOUCH             = bit.lshift(1, 23),
    BASEVELOCITY          = bit.lshift(1, 24),
    WORLDBRUSH            = bit.lshift(1, 25),
    OBJECT                = bit.lshift(1, 26),
    KILLME                = bit.lshift(1, 27),
    ONFIRE                = bit.lshift(1, 28),
    DISSOLVING            = bit.lshift(1, 29),
    TRANSRAGDOLL          = bit.lshift(1, 30),
    UNBLOCKABLE_BY_PLAYER = bit.lshift(1, 31)
};

KNIFE_IDXs = {
    WEAPON_KNIFE_BAYONET = 500,
    WEAPON_KNIFE_CSS = 503,
    WEAPON_KNIFE_FLIP = 505,
    WEAPON_KNIFE_GUT = 506,
    WEAPON_KNIFE_KARAMBIT = 507,
    WEAPON_KNIFE_M9_BAYONET = 508,
    WEAPON_KNIFE_TACTICAL = 509,
    WEAPON_KNIFE_FALCHION = 512,
    WEAPON_KNIFE_SURVIVAL_BOWIE = 514,
    WEAPON_KNIFE_BUTTERFLY = 515,
    WEAPON_KNIFE_PUSH = 516,
    WEAPON_KNIFE_CORD = 517,
    WEAPON_KNIFE_CANIS = 518,
    WEAPON_KNIFE_URSUS = 519,
    WEAPON_KNIFE_GYPSY_JACKKNIFE = 520,
    WEAPON_KNIFE_OUTDOOR = 521,
    WEAPON_KNIFE_STILETTO = 522,
    WEAPON_KNIFE_WIDOWMAKER = 523,
    WEAPON_KNIFE_SKELETON = 525,
};

KNIFE_MDLs = {
    [KNIFE_IDXs.WEAPON_KNIFE_BAYONET] = 'models/weapons/v_knife_bayonet.mdl',
    [KNIFE_IDXs.WEAPON_KNIFE_FLIP] = 'models/weapons/v_knife_flip.mdl',
    [KNIFE_IDXs.WEAPON_KNIFE_GUT] = 'models/weapons/v_knife_gut.mdl',
    [KNIFE_IDXs.WEAPON_KNIFE_KARAMBIT] = 'models/weapons/v_knife_karam.mdl',
    [KNIFE_IDXs.WEAPON_KNIFE_M9_BAYONET] = 'models/weapons/v_knife_m9_bay.mdl',
    [KNIFE_IDXs.WEAPON_KNIFE_TACTICAL] = 'models/weapons/v_knife_tactical.mdl',
    [KNIFE_IDXs.WEAPON_KNIFE_FALCHION] = 'models/weapons/v_knife_falchion_advanced.mdl',
    [KNIFE_IDXs.WEAPON_KNIFE_SURVIVAL_BOWIE] = 'models/weapons/v_knife_survival_bowie.mdl',
    [KNIFE_IDXs.WEAPON_KNIFE_BUTTERFLY] = 'models/weapons/v_knife_butterfly.mdl',
    [KNIFE_IDXs.WEAPON_KNIFE_PUSH] = 'models/weapons/v_knife_push.mdl',
    [KNIFE_IDXs.WEAPON_KNIFE_URSUS] = 'models/weapons/v_knife_ursus.mdl',
    [KNIFE_IDXs.WEAPON_KNIFE_GYPSY_JACKKNIFE] = 'models/weapons/v_knife_gypsy_jackknife.mdl',
    [KNIFE_IDXs.WEAPON_KNIFE_STILETTO] = 'models/weapons/v_knife_stiletto.mdl',
    [KNIFE_IDXs.WEAPON_KNIFE_WIDOWMAKER] = 'models/weapons/v_knife_widowmaker.mdl',
    [KNIFE_IDXs.WEAPON_KNIFE_CSS] = 'models/weapons/v_knife_css.mdl',
    [KNIFE_IDXs.WEAPON_KNIFE_CORD] = 'models/weapons/v_knife_cord.mdl',
    [KNIFE_IDXs.WEAPON_KNIFE_CANIS] = 'models/weapons/v_knife_canis.mdl',
    [KNIFE_IDXs.WEAPON_KNIFE_OUTDOOR] = 'models/weapons/v_knife_outdoor.mdl',
    [KNIFE_IDXs.WEAPON_KNIFE_SKELETON] = 'models/weapons/v_knife_skeleton.mdl',
};

TypingSpeeds = {
    ['a'] = 300,
    ['b'] = 250,
    ['c'] = 275,
    ['d'] = 250,
    ['e'] = 325,
    ['f'] = 275,
    ['g'] = 250,
    ['h'] = 300,
    ['i'] = 325,
    ['j'] = 225,
    ['k'] = 250,
    ['l'] = 275,
    ['m'] = 250,
    ['n'] = 250,
    ['o'] = 300,
    ['p'] = 225,
    ['q'] = 200,
    ['r'] = 275,
    ['s'] = 275,
    ['t'] = 300,
    ['u'] = 300,
    ['v'] = 250,
    ['w'] = 225,
    ['x'] = 200,
    ['y'] = 250,
    ['z'] = 200,

    ['а'] = 300,
    ['б'] = 250,
    ['в'] = 275,
    ['г'] = 250,
    ['д'] = 250,
    ['е'] = 325,
    ['ё'] = 325,
    ['ж'] = 225,
    ['з'] = 250,
    ['и'] = 325,
    ['й'] = 250,
    ['к'] = 250,
    ['л'] = 275,
    ['м'] = 250,
    ['н'] = 250,
    ['о'] = 300,
    ['п'] = 250,
    ['р'] = 275,
    ['с'] = 275,
    ['т'] = 300,
    ['у'] = 300,
    ['ф'] = 250,
    ['х'] = 250,
    ['ц'] = 225,
    ['ч'] = 225,
    ['ш'] = 225,
    ['щ'] = 225,
    ['ы'] = 250,
    ['ь'] = 275,
    ['э'] = 300,
    ['ю'] = 250,
    ['я'] = 250,

    [' '] = 500,
    [','] = 200,
    ['.'] = 200,
    ['!'] = 200,
    ['?'] = 200,
    [';'] = 200,
    [':'] = 200,
    ['-'] = 225,
    ['('] = 250,
    [')'] = 250,
    ['{'] = 250,
    ['}'] = 250,
    ['['] = 250,
    [']'] = 250,
    ["'"] = 200,
    ['"'] = 200,
    ['/'] = 225,
    ['\\'] = 225,
    ['|'] = 225,
    ['&'] = 200,
    ['#'] = 200,
    ['$'] = 225,
    ['%'] = 225,
    ['^'] = 200,
    ['*'] = 225,
    ['+'] = 225,
    ['='] = 200,
    ['<'] = 200,
    ['>'] = 200,
    ['~'] = 225,
    ['@'] = 200,
    ['—'] = 225,
    ['№'] = 200,
    ['•'] = 200,
    ['©'] = 200,
    ['®'] = 200,
    ['™'] = 200,
};
